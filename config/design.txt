file layout
===========

config/config.hpp
config/config_parser.hpp
config/config_validator.hpp
config/v1/metrics/handler.hpp
config/v1/metrics/handler.json
config/v1/metrics/prometheus_handler.hpp
config/v1/metrics/prometheus_handler.json
config/v1/server/server.hpp
config/v1/config.hpp
config/v1/config_validator.hpp
config/v1/config_parser.hpp
config/v1/schema.json

interface
=========

expected<Config, Error> ConfigParser::parse(std::string data) {
    json obj = json::parse(data);
}

flow
====

 1. parse text => json
  1.a exit with error if parsing fails
 2. look for apiVersion property
  2.a if not present, or does not match any accepted values, use $SUPER schema
  2.b otherwise, choose $APIVERSION schema that matches 'apiVersion'
 3. validate config with chosen schema
  3.a exit with error if validation fails
 4. convert json to config object

config file structure
=====================
{
  "apiVersion": "v0",
  "dns": {
    "resolver": {
      "type": "libresolv",
      "libresolv": {
        "function": "query"
      }
    },
    "server": {
      "transport": {
        "address": "udp://0.0.0.0:53",
        "maxConnections": 100
      }
    }
  },
  "metrics": {
    "handlers": [
      {
        "type": "prometheus",
        "prometheus": {
          "maxTimeSeries": 10000,
          "transports": [
            {
              "type": "pull",
              "url": "http://0.0.0.0:1234/metrics"
            },
            {
              "type": "push",
              ...
            }  
          ]
        }
      }
    ]
  }
}
